<Type Name="GenericType&lt;K2,V2&gt;" FullName="TheNamespace.GenericType&lt;K2,V2&gt;">
  <TypeSignature Language="C#" Value="public class GenericType&lt;K1,V1&gt;" FrameworkAlternate="One" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GenericType`2&lt;K1, V1&gt; extends System.Object" FrameworkAlternate="One" />
  <TypeSignature Language="DocId" Value="T:TheNamespace.GenericType`2" />
  <TypeSignature Language="VB.NET" Value="Public Class GenericType(Of K1, V1)" FrameworkAlternate="One" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename K1, typename V1&gt;&#xA;public ref class GenericType" FrameworkAlternate="One" />
  <TypeSignature Language="F#" Value="type GenericType&lt;'K1, 'V1&gt; = class" FrameworkAlternate="One" />
  <TypeSignature Language="C#" Value="public class GenericType&lt;K2,V2&gt;" FrameworkAlternate="Two" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GenericType`2&lt;K2, V2&gt; extends System.Object" FrameworkAlternate="Two" />
  <TypeSignature Language="VB.NET" Value="Public Class GenericType(Of K2, V2)" FrameworkAlternate="Two" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename K2, typename V2&gt;&#xA;public ref class GenericType" FrameworkAlternate="Two" />
  <TypeSignature Language="F#" Value="type GenericType&lt;'K2, 'V2&gt; = class" FrameworkAlternate="Two" />
  <AssemblyInfo>
    <AssemblyName>DocTest-differentTypeParameterNames-First</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>DocTest-differentTypeParameterNames-Second</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="K1" Index="0" FrameworkAlternate="One" />
    <TypeParameter Name="K2" Index="0" FrameworkAlternate="Two" />
    <TypeParameter Name="V1" Index="1" FrameworkAlternate="One" />
    <TypeParameter Name="V2" Index="1" FrameworkAlternate="Two" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="K1">To be added.</typeparam>
    <typeparam name="K2">To be added.</typeparam>
    <typeparam name="V1">To be added.</typeparam>
    <typeparam name="V2">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenericType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:TheNamespace.GenericType`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GenericType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocTest-differentTypeParameterNames-First</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>DocTest-differentTypeParameterNames-Second</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenericMethod&lt;T2,U2&gt;">
      <MemberSignature Language="C#" Value="public void GenericMethod&lt;T1,U1&gt; ();" FrameworkAlternate="One" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GenericMethod&lt;T1, U1&gt;() cil managed" FrameworkAlternate="One" />
      <MemberSignature Language="DocId" Value="M:TheNamespace.GenericType`2.GenericMethod``2" />
      <MemberSignature Language="VB.NET" Value="Public Sub GenericMethod(Of T1, U1) ()" FrameworkAlternate="One" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename U1&gt;&#xA; void GenericMethod();" FrameworkAlternate="One" />
      <MemberSignature Language="F#" Value="member this.GenericMethod : unit -&gt; unit" Usage="genericType.GenericMethod " />
      <MemberSignature Language="C#" Value="public void GenericMethod&lt;T2,U2&gt; ();" FrameworkAlternate="Two" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GenericMethod&lt;T2, U2&gt;() cil managed" FrameworkAlternate="Two" />
      <MemberSignature Language="VB.NET" Value="Public Sub GenericMethod(Of T2, U2) ()" FrameworkAlternate="Two" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T2, typename U2&gt;&#xA; void GenericMethod();" FrameworkAlternate="Two" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>DocTest-differentTypeParameterNames-First</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>DocTest-differentTypeParameterNames-Second</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" Index="0" FrameworkAlternate="One" />
        <TypeParameter Name="T2" Index="0" FrameworkAlternate="Two" />
        <TypeParameter Name="U1" Index="1" FrameworkAlternate="One" />
        <TypeParameter Name="U2" Index="1" FrameworkAlternate="Two" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T1">To be added.</typeparam>
        <typeparam name="T2">To be added.</typeparam>
        <typeparam name="U1">To be added.</typeparam>
        <typeparam name="U2">To be added.</typeparam>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
